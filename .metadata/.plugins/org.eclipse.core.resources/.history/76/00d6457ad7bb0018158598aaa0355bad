package com.poc.controller;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.poc.jdbc.CaseRegisterJdbcRepository;
import com.poc.model.CaseRegister;
import com.poc.model.DataCollection;

@RestController
public class CaseRegisterController {
	
	@Autowired
	private DiscoveryClient discoveryClient;
	
	@Autowired
	CaseRegisterJdbcRepository repository;
	
	@RequestMapping(value = "/register/new", method = RequestMethod.GET)
	public CaseRegister register() {
		CaseRegister register = new CaseRegister();
		String uniqueID = UUID.randomUUID().toString();
		register.setId(uniqueID);
		register.setName("case-register");
		register.setStatus("success");
		repository.insert(register);
		
		return register;
	}
	
	
	public <T> ResponseEntity<?> callService(String url, String serviceName, Class<V> genericClass) {
		List<ServiceInstance> instances=discoveryClient.getInstances(serviceName);
		ServiceInstance serviceInstance=instances.get(0);
		
		String baseUrl=serviceInstance.getUri().toString();
		
		baseUrl=baseUrl+url;
		
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<T> response=null;
		try{
		response=restTemplate.exchange(baseUrl,
				HttpMethod.GET, getHeaders(),);
		}catch (Exception ex)
		{
			System.out.println(ex);
		}
		System.out.println(response.getBody());
		return response; 
	}
	
	public ResponseEntity<DataCollection> getDataCollector() throws RestClientException, IOException {
		
		List<ServiceInstance> instances=discoveryClient.getInstances("datacollect-service");
		ServiceInstance serviceInstance=instances.get(0);
		
		String baseUrl=serviceInstance.getUri().toString();
		
		baseUrl=baseUrl+"/collect";
		
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<DataCollection> response=null;
		try{
		response=restTemplate.exchange(baseUrl,
				HttpMethod.GET, getHeaders(),DataCollection.class);
		}catch (Exception ex)
		{
			System.out.println(ex);
		}
		System.out.println(response.getBody());
		return response;
	}
	
	
	@RequestMapping(value = "/register/findall", method = RequestMethod.GET)
	public List<CaseRegister> findall() {
	
		List<CaseRegister> cases = repository.findAll();
		return cases;
	}
		
	@RequestMapping(value = "/register/{id}", method = RequestMethod.GET)
	public CaseRegister findById(@PathVariable("id") String id) {
	
		CaseRegister cases = repository.findById(id);
		return cases;
	}	
	
	private static HttpEntity<?> getHeaders() throws IOException {
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		return new HttpEntity<Object>(headers);
	}

}
