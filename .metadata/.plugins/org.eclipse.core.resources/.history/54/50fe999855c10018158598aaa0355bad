package com.poc.util;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class Utils {
	
	@Autowired
	private static DiscoveryClient discoveryClient;

	public static <T> ResponseEntity<T> invokeService(String restMap, String serviceName, Class<T> genericClass, HttpMethod httpMethod) {
		List<ServiceInstance> instances = discoveryClient.getInstances(serviceName);
		ServiceInstance serviceInstance=instances.get(0);
		
		String baseUrl=serviceInstance.getUri().toString();
		
		baseUrl=baseUrl+restMap;
		
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<T> response=null;
		try{
			switch (httpMethod) {
				case GET:
					response = (ResponseEntity<T>) restTemplate.exchange(baseUrl, HttpMethod.GET, getHeaders(),
							genericClass);
				case POST:
					response = (ResponseEntity<T>) restTemplate.exchange(baseUrl, HttpMethod.POST, getHeaders(),
							genericClass);
				case PUT:
					response = (ResponseEntity<T>) restTemplate.exchange(baseUrl, HttpMethod.PUT, getHeaders(),
							genericClass);
				case DELETE:
					response = (ResponseEntity<T>) restTemplate.exchange(baseUrl, HttpMethod.DELETE, getHeaders(),
							genericClass);
				default:
					response = (ResponseEntity<T>) restTemplate.exchange(baseUrl, HttpMethod.PATCH, getHeaders(),
							genericClass);
			}
		} catch (Exception ex) {
			System.out.println(ex);
		}
		return response; 
	}
	
	private static HttpEntity<?> getHeaders() throws IOException {
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		return new HttpEntity<Object>(headers);
	}


}
